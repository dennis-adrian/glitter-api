generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String? @map("first_name")
  lastName String? @map("last_name")
  displayName String @map("display_name")
  email String @unique
  country String?
  city String?
  phone String?
  isAdmin Boolean @default(false) @map("is_admin")
  isArtist Boolean @default(false) @map("is_artist")
  firebaseId String @unique @map("firebase_id")
  photoURL String? @map("photo_url")
  isCustomPhoto Boolean @default(false) @map("is_custom_photo")
  instagramProfile String? @map("instagram_profile")
  isApproved Boolean @default(false) @map("is_approved")
  reservationsRequested Reservation[] @relation("RequestedByRelation")
  reservations Reservation[] @relation("ArtistRelation")
  status UserStatus @default(WAITING_APPROVAL)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Festival {
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  startDate DateTime @map("start_date")
  endDate DateTime @map("end_date")
  location String?
  locationURL String? @map("location_url")
  logoURL String? @map("logo_url")
  status FestivalStatus @default(DRAFT)
  stands Stand[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("festivals")
}

model Stand {
  id Int @id @default(autoincrement())
  label String?
  standNumber Int @map("stand_number")
  description String?
  price Float?
  festival Festival @relation(fields: [festivalId], references: [id])
  festivalId Int @map("festival_id")
  reservations Reservation[]
  status StandStatus @default(AVAILABLE)
  orientation StandOrientation @default(HORIZONTAL)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("stands")
}

model Reservation {
  id Int @id @default(autoincrement())
  status ReservationStatus @default(PENDING)
  stand Stand @relation(fields: [standId], references: [id])
  standId Int @map("stand_id")
  artist User @relation("ArtistRelation", fields: [artistId], references: [id])
  artistId Int @map("artist_id")
  requestedBy User @relation("RequestedByRelation", fields: [requestedById], references: [id])
  requestedById Int @map("requested_by_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reservations")
}

enum FestivalStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  ACTIVE
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum StandStatus {
  AVAILABLE
  RESERVED
  CONFIRMED
}

enum StandOrientation {
  HORIZONTAL
  VERTICAL
}

enum UserStatus {
  ACTIVE
  WAITING_APPROVAL
  DISABLED
}
